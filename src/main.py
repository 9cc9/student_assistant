"""AIÂä©ÊïôËØÑ‰º∞Á≥ªÁªü‰∏ªÂ∫îÁî®"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
from typing import Dict, Any
import time
from datetime import datetime
from pathlib import Path

# ÂØºÂÖ•ÈÖçÁΩÆÂíåË∑ØÁî±
from .config import get_settings
from .api import assessment_router, system_router, upload_router, learning_path_router, diagnostic_router, auth_router, student_router


# Â∫îÁî®ÁîüÂëΩÂë®ÊúüÁÆ°ÁêÜ
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Â∫îÁî®ÁîüÂëΩÂë®ÊúüÁÆ°ÁêÜ"""
    # ÂêØÂä®Êó∂ÊâßË°å
    print("üöÄ AIÂä©ÊïôËØÑ‰º∞Á≥ªÁªüÊ≠£Âú®ÂêØÂä®...")
    print(f"‚öôÔ∏è  ÁéØÂ¢É: {settings.environment}")
    print(f"üîß Ë∞ÉËØïÊ®°Âºè: {settings.debug}")
    print(f"üìä Êï∞ÊçÆÂ∫ì: {settings.database_url}")
    
    # ËøôÈáåÂèØ‰ª•ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìËøûÊé•„ÄÅÁºìÂ≠òÁ≠â
    # await init_database()
    # await init_cache()
    
    yield
    
    # ÂÖ≥Èó≠Êó∂ÊâßË°å
    print("üõë AIÂä©ÊïôËØÑ‰º∞Á≥ªÁªüÊ≠£Âú®ÂÖ≥Èó≠...")
    # await cleanup_resources()


# Ëé∑ÂèñÈÖçÁΩÆ
settings = get_settings()

# ÂàõÂª∫FastAPIÂ∫îÁî®
app = FastAPI(
    title=settings.app_name,
    description="""
    ## AIÂä©ÊïôËØÑ‰º∞Á≥ªÁªü

    Êô∫ËÉΩÂåñÁöÑÂ≠¶Áîü‰Ωú‰∏öËØÑ‰º∞Âπ≥Âè∞ÔºåÊîØÊåÅÂØπIdea„ÄÅUIËÆæËÆ°„ÄÅ‰ª£Á†ÅÂÆûÁé∞ËøõË°åÂ§öÁª¥Â∫¶ËØÑ‰º∞„ÄÇ

    ### ‰∏ªË¶ÅÂäüËÉΩ

    - **Â§öÁª¥Â∫¶ËØÑ‰º∞**: ÊîØÊåÅIdeaÂàõÊñ∞ÊÄß„ÄÅUIÂèØÁî®ÊÄß„ÄÅ‰ª£Á†ÅË¥®ÈáèÁöÑÁªºÂêàËØÑ‰º∞
    - **Êô∫ËÉΩËØäÊñ≠**: Êèê‰æõËØ¶ÁªÜÁöÑÈóÆÈ¢òËØäÊñ≠ÂíåÊîπËøõÂª∫ËÆÆ
    - **‰∏™ÊÄßÂåñÂ≠¶‰π†Ë∑ØÂæÑ**: Âü∫‰∫éÂÖ•Â≠¶ËØäÊñ≠ÂíåÂ≠¶‰π†ËøõÂ±ïÁöÑÊô∫ËÉΩË∑ØÂæÑÊé®Ëçê
    - **Âõ∫ÂÆöËäÇÁÇπ+ÂèØÂèòÈÄöÈÅì**: A/B/C‰∏âÊ°£‰ªªÂä°ÂåÖÁöÑ‰∏™ÊÄßÂåñÊú∫Âà∂
    - **ÂÆûÊó∂ÂèçÈ¶à**: Âø´ÈÄüÁöÑËØÑ‰º∞ÂèçÈ¶àÂíåÁªìÊûúÊü•ËØ¢
    - **ÊâπÈáèÂ§ÑÁêÜ**: ÊîØÊåÅÊâπÈáèËØÑ‰º∞ÂíåÂØπÊØîÂàÜÊûê

    ### APIÁâàÊú¨

    ÂΩìÂâçAPIÁâàÊú¨: **v1**
    
    ### ËÆ§ËØÅ

    ÈÉ®ÂàÜAPIÈúÄË¶ÅËÆ§ËØÅÔºåËØ∑Âú®ËØ∑Ê±ÇÂ§¥‰∏≠ÂåÖÂê´ÊúâÊïàÁöÑËÆøÈóÆ‰ª§Áâå„ÄÇ
    """,
    version=settings.app_version,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    lifespan=lifespan
)

# Ê∑ªÂä†‰∏≠Èó¥‰ª∂
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=["*"] if settings.debug else ["localhost", "127.0.0.1"]
)


# ËØ∑Ê±ÇÂ§ÑÁêÜÊó∂Èó¥‰∏≠Èó¥‰ª∂
@app.middleware("http")
async def add_process_time_header(request, call_next):
    """Ê∑ªÂä†Â§ÑÁêÜÊó∂Èó¥Â§¥"""
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    response.headers["X-Timestamp"] = datetime.now().isoformat()
    return response


# ÂÖ®Â±ÄÂºÇÂ∏∏Â§ÑÁêÜÂô®
@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    """HTTPÂºÇÂ∏∏Â§ÑÁêÜÂô®"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": exc.detail,
            "status_code": exc.status_code,
            "timestamp": datetime.now().isoformat(),
            "path": str(request.url)
        }
    )


@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    """ÈÄöÁî®ÂºÇÂ∏∏Â§ÑÁêÜÂô®"""
    return JSONResponse(
        status_code=500,
        content={
            "error": "ÂÜÖÈÉ®ÊúçÂä°Âô®ÈîôËØØ",
            "detail": str(exc) if settings.debug else "ÊúçÂä°ÊöÇÊó∂‰∏çÂèØÁî®",
            "status_code": 500,
            "timestamp": datetime.now().isoformat(),
            "path": str(request.url)
        }
    )


# Ê≥®ÂÜåË∑ØÁî±
app.include_router(assessment_router)
app.include_router(system_router)
app.include_router(upload_router)
app.include_router(learning_path_router)
app.include_router(diagnostic_router)
app.include_router(auth_router)
app.include_router(student_router)

# ÈùôÊÄÅÊñá‰ª∂ÊúçÂä°
static_dir = Path(__file__).parent.parent / "static"
if static_dir.exists():
    app.mount("/static", StaticFiles(directory=static_dir), name="static")


# Ê†πË∑ØÂæÑ - ÈáçÂÆöÂêëÂà∞ÂâçÁ´ØÈ°µÈù¢
@app.get("/", tags=["Root"])
async def root():
    """Á≥ªÁªüÊ†πË∑ØÂæÑ - ËøîÂõûÂâçÁ´ØÈ°µÈù¢"""
    from fastapi.responses import FileResponse
    static_dir = Path(__file__).parent.parent / "static"
    index_file = static_dir / "index.html"
    
    if index_file.exists():
        return FileResponse(index_file)
    else:
        return {
            "message": "Ê¨¢Ëøé‰ΩøÁî®AIÂä©ÊïôËØÑ‰º∞Á≥ªÁªü",
            "version": settings.app_version,
            "environment": settings.environment,
            "docs_url": "/docs",
            "health_check": "/api/system/health",
            "timestamp": datetime.now().isoformat(),
            "features": [
                "Â§öÁª¥Â∫¶Êô∫ËÉΩËØÑ‰º∞",
                "‰∏™ÊÄßÂåñÂ≠¶‰π†Ë∑ØÂæÑÊé®Ëçê",
                "Âõ∫ÂÆöËäÇÁÇπ+ÂèØÂèòÈÄöÈÅìÊú∫Âà∂",
                "ÂÆûÊó∂ÂèçÈ¶àÂíåËØäÊñ≠",
                "AIÂä©ÊïôÈõÜÊàê",
                "Êñá‰ª∂‰∏ä‰º†ÊîØÊåÅ",
                "Git‰ªìÂ∫ìÈõÜÊàê"
            ]
        }


# API‰ø°ÊÅØË∑ØÂæÑ
@app.get("/info", tags=["Root"])
async def api_info() -> Dict[str, Any]:
    """API‰ø°ÊÅØ"""
    return {
        "api_name": settings.app_name,
        "api_version": settings.app_version,
        "environment": settings.environment,
        "endpoints": {
            "assessment": "/api/assessment",
            "learning_path": "/api/learning-path", 
            "system": "/api/system"
        },
        "documentation": {
            "swagger_ui": "/docs",
            "redoc": "/redoc",
            "openapi_schema": "/openapi.json"
        },
        "support": {
            "health_check": "/api/system/health",
            "system_status": "/api/system/status",
            "version_info": "/api/system/version"
        }
    }


if __name__ == "__main__":
    import uvicorn
    
    # ËøêË°åÂ∫îÁî®
    uvicorn.run(
        "src.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        access_log=True,
        log_level=settings.log_level.lower()
    )

